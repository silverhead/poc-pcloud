{% extends 'base.html.twig' %}

{% block title %}Gestionnaire de Sauvegardes - Accueil{% endblock %}

{% block body %}
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0">
                <i class="fas fa-cloud-upload-alt text-primary me-2"></i>
                Gestionnaire de Sauvegardes pCloud
            </h1>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary" onclick="refreshBrowsers()">
                    <i class="fas fa-sync-alt me-1"></i>Actualiser
                </button>
                <a href="{{ path('backup_config') }}" class="btn btn-outline-secondary">
                    <i class="fas fa-cog me-1"></i>Configuration
                </a>
            </div>
        </div>
    </div>
</div>

<div class="row g-4">
    <!-- Navigateur de fichiers local -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <i class="fas fa-server text-success me-2"></i>
                    <span>Serveur Local</span>
                </div>
                <small class="text-muted">{{ config.localBasePath }}</small>
            </div>
            <div class="card-body p-0">
                <!-- Fil d'Ariane Local -->
                <div class="p-3 border-bottom">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0" id="localBreadcrumb">
                            <li class="breadcrumb-item">
                                <a href="#" onclick="navigateLocal('')">
                                    <i class="fas fa-home me-1"></i>Racine
                                </a>
                            </li>
                        </ol>
                    </nav>
                </div>
                
                <!-- Liste des fichiers locaux -->
                <div class="file-browser" id="localFiles">
                    <div class="text-center p-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <p class="mt-2 text-muted">Chargement des fichiers...</p>
                    </div>
                </div>
            </div>
                            <div class="card-footer">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted" id="localInfo">S√©lectionnez des fichiers ou dossiers</small>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="selectAllLocal()" title="Tout s√©lectionner">
                                <i class="fas fa-check-double"></i>
                            </button>
                            <button class="btn btn-outline-secondary" onclick="clearSelectionLocal()" title="D√©s√©lectionner">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                </div>
        </div>
    </div>

    <!-- Navigateur de fichiers pCloud -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <i class="fas fa-cloud text-info me-2"></i>
                    <span>pCloud</span>
                </div>
                <small class="text-muted">{{ config.pcloudBasePath }}</small>
            </div>
            <div class="card-body p-0">
                <!-- Fil d'Ariane pCloud -->
                <div class="p-3 border-bottom">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0" id="pcloudBreadcrumb">
                            <li class="breadcrumb-item">
                                <a href="#" onclick="navigatePcloud('')">
                                    <i class="fas fa-cloud me-1"></i>Racine
                                </a>
                            </li>
                        </ol>
                    </nav>
                </div>
                
                <!-- Liste des fichiers pCloud -->
                <div class="file-browser" id="pcloudFiles">
                    <div class="text-center p-4">
                        <div class="spinner-border text-info" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <p class="mt-2 text-muted">Chargement des fichiers pCloud...</p>
                    </div>
                </div>
            </div>
                            <div class="card-footer">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted" id="pcloudInfo">S√©lectionnez des fichiers ou dossiers</small>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-info" onclick="selectAllPcloud()" title="Tout s√©lectionner">
                                <i class="fas fa-check-double"></i>
                            </button>
                            <button class="btn btn-outline-secondary" onclick="clearSelectionPcloud()" title="D√©s√©lectionner">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                </div>
        </div>
    </div>
</div>

<!-- Actions de synchronisation -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-exchange-alt me-2"></i>
                    Actions de Synchronisation
                </h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <div class="d-grid">
                            <button class="btn btn-primary btn-lg" onclick="syncToCloud()" id="syncToCloudBtn">
                                <i class="fas fa-cloud-upload-alt me-2"></i>
                                Synchroniser vers pCloud
                            </button>
                            <small class="text-muted mt-1">Sync compl√®te - Fichiers et dossiers complets (supprime les fichiers en trop sur pCloud)</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="d-grid">
                            <button class="btn btn-info btn-lg" onclick="copyToCloud()" id="copyToCloudBtn">
                                <i class="fas fa-copy me-2"></i>
                                Copier vers pCloud
                            </button>
                            <small class="text-muted mt-1">Copie simple - Fichiers et dossiers complets (conserve tous les fichiers)</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="d-grid">
                            <button class="btn btn-success btn-lg" onclick="syncFromCloud()" id="syncFromCloudBtn">
                                <i class="fas fa-cloud-download-alt me-2"></i>
                                Synchroniser depuis pCloud
                            </button>
                            <small class="text-muted mt-1">R√©cup√®re les fichiers et dossiers complets depuis pCloud</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="d-grid">
                            <button class="btn btn-danger btn-lg" onclick="deleteSelectedFromCloud()" id="deleteFromCloudBtn">
                                <i class="fas fa-trash-alt me-2"></i>
                                Supprimer de pCloud
                            </button>
                            <small class="text-muted mt-1">‚ö†Ô∏è Supprime d√©finitivement les √©l√©ments s√©lectionn√©s</small>
                        </div>
                    </div>
                </div>
                
                <div class="mt-3 p-3 bg-light rounded">
                    <h6 class="mb-2">
                        <i class="fas fa-info-circle text-info me-1"></i>
                        S√©lections actuelles :
                    </h6>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Local:</strong> 
                            <span id="localSelection" class="text-muted">Aucune s√©lection</span>
                        </div>
                        <div class="col-md-6">
                            <strong>pCloud:</strong> 
                            <span id="pcloudSelection" class="text-muted">Aucune s√©lection</span>
                        </div>
                    </div>
                </div>
                
                <!-- Section d'aide pour les dossiers complets et suppressions -->
                <div class="mt-3 p-3 bg-primary bg-opacity-10 rounded border border-primary border-opacity-25">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <h6 class="mb-2 text-primary">
                                <i class="fas fa-folder-plus me-1"></i>
                                üí° Sauvegarde de Dossiers Complets
                            </h6>
                            <ul class="list-unstyled mb-0 small">
                                <li><i class="fas fa-check text-success me-2"></i><strong>S√©lectionnez des dossiers</strong> avec les cases √† cocher</li>
                                <li><i class="fas fa-check text-success me-2"></i><strong>Tout le contenu</strong> sera sauvegard√© automatiquement</li>
                                <li><i class="fas fa-check text-success me-2"></i><strong>Structure pr√©serv√©e</strong> (sous-dossiers inclus)</li>
                                <li><i class="fas fa-arrow-right text-info me-2"></i>Cliquez sur la <strong>fl√®che</strong> pour naviguer</li>
                                <li><i class="fas fa-square-check text-info me-2"></i>Cliquez sur la <strong>case</strong> pour s√©lectionner</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6 class="mb-2 text-danger">
                                <i class="fas fa-trash-alt me-1"></i>
                                üóëÔ∏è Suppression sur pCloud
                            </h6>
                            <ul class="list-unstyled mb-0 small">
                                <li><i class="fas fa-exclamation-triangle text-warning me-2"></i><strong>Bouton rouge individuel</strong> pour supprimer un √©l√©ment</li>
                                <li><i class="fas fa-exclamation-triangle text-warning me-2"></i><strong>Suppression multiple</strong> des √©l√©ments s√©lectionn√©s</li>
                                <li><i class="fas fa-ban text-danger me-2"></i><strong>IRR√âVERSIBLE</strong> - Double confirmation requise</li>
                                <li><i class="fas fa-folder text-danger me-2"></i><strong>Dossiers complets</strong> supprim√©s avec contenu</li>
                                <li><i class="fas fa-shield-alt text-info me-2"></i><strong>Serveur local</strong> non affect√©</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let currentLocalPath = '';
let currentPcloudPath = '';
let localSelectedFiles = new Set();
let pcloudSelectedFiles = new Set();

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    loadLocalFiles('');
    loadPcloudFiles('');
});

// Chargement des fichiers locaux
async function loadLocalFiles(path) {
    try {
        document.getElementById('localFiles').innerHTML = `
            <div class="text-center p-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p class="mt-2 text-muted">Chargement des fichiers...</p>
            </div>
        `;
        
        const response = await fetch(`{{ path('backup_local_files') }}?path=${encodeURIComponent(path)}`);
        const data = await response.json();
        
        if (data.success) {
            currentLocalPath = data.currentPath;
            displayLocalFiles(data.files);
            updateLocalBreadcrumb(data.currentPath);
        } else {
            throw new Error(data.error || 'Erreur lors du chargement');
        }
    } catch (error) {
        document.getElementById('localFiles').innerHTML = `
            <div class="text-center p-4 text-danger">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <p>Erreur: ${error.message}</p>
                <button class="btn btn-outline-primary btn-sm" onclick="loadLocalFiles('${path}')">
                    <i class="fas fa-retry me-1"></i>R√©essayer
                </button>
            </div>
        `;
    }
}

// Chargement des fichiers pCloud
async function loadPcloudFiles(path) {
    try {
        document.getElementById('pcloudFiles').innerHTML = `
            <div class="text-center p-4">
                <div class="spinner-border text-info" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p class="mt-2 text-muted">Chargement des fichiers pCloud...</p>
            </div>
        `;
        
        const response = await fetch(`{{ path('backup_pcloud_files') }}?path=${encodeURIComponent(path)}`);
        const data = await response.json();
        
        if (data.success) {
            currentPcloudPath = data.currentPath;
            displayPcloudFiles(data.files);
            updatePcloudBreadcrumb(data.currentPath);
        } else {
            throw new Error(data.error || 'Erreur lors du chargement');
        }
    } catch (error) {
        document.getElementById('pcloudFiles').innerHTML = `
            <div class="text-center p-4 text-danger">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <p>Erreur: ${error.message}</p>
                <button class="btn btn-outline-info btn-sm" onclick="loadPcloudFiles('${path}')">
                    <i class="fas fa-retry me-1"></i>R√©essayer
                </button>
            </div>
        `;
    }
}

// Affichage des fichiers locaux
function displayLocalFiles(files) {
    const container = document.getElementById('localFiles');
    
    if (files.length === 0) {
        container.innerHTML = `
            <div class="text-center p-4 text-muted">
                <i class="fas fa-folder-open fa-2x mb-2"></i>
                <p>Aucun fichier dans ce dossier</p>
            </div>
        `;
        return;
    }
    
    let html = '';
    files.forEach(file => {
        const isSelected = localSelectedFiles.has(file.path);
        const icon = file.type === 'directory' ? 
            '<i class="fas fa-folder folder-icon"></i>' : 
            '<i class="fas fa-file file-icon-default"></i>';
        
        html += `
            <div class="file-item ${isSelected ? 'selected' : ''}" 
                 title="${file.name}">
                <span class="file-icon">${icon}</span>
                <div class="flex-grow-1" onclick="${file.type === 'directory' ? `navigateLocal('${file.path}')` : `toggleLocalSelection('${file.path}')`}">
                    <div class="fw-medium">${file.name}</div>
                    <small class="text-muted">
                        ${file.type === 'file' ? formatBytes(file.size) + ' ‚Ä¢ ' : 'Dossier ‚Ä¢ '}
                        ${formatDate(file.modified)}
                    </small>
                </div>
                <div class="d-flex align-items-center gap-2">
                    ${file.type === 'directory' ? `
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" ${isSelected ? 'checked' : ''} 
                                   onclick="event.stopPropagation(); toggleLocalSelection('${file.path}')"
                                   title="S√©lectionner ce dossier">
                        </div>
                        <i class="fas fa-chevron-right text-muted" onclick="navigateLocal('${file.path}')" style="cursor: pointer;"></i>
                    ` : `
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" ${isSelected ? 'checked' : ''} 
                                   onclick="event.stopPropagation(); toggleLocalSelection('${file.path}')">
                        </div>
                    `}
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
    updateLocalInfo();
}

// Affichage des fichiers pCloud
function displayPcloudFiles(files) {
    const container = document.getElementById('pcloudFiles');
    
    if (files.length === 0) {
        container.innerHTML = `
            <div class="text-center p-4 text-muted">
                <i class="fas fa-cloud fa-2x mb-2"></i>
                <p>Aucun fichier dans ce dossier</p>
            </div>
        `;
        return;
    }
    
    let html = '';
    files.forEach(file => {
        const isSelected = pcloudSelectedFiles.has(file.path);
        const icon = file.type === 'directory' ? 
            '<i class="fas fa-folder folder-icon"></i>' : 
            '<i class="fas fa-file file-icon-default"></i>';
        
        html += `
            <div class="file-item ${isSelected ? 'selected' : ''}" 
                 title="${file.name}">
                <span class="file-icon">${icon}</span>
                <div class="flex-grow-1" onclick="${file.type === 'directory' ? `navigatePcloud('${file.path}')` : `togglePcloudSelection('${file.path}')`}">
                    <div class="fw-medium">${file.name}</div>
                    <small class="text-muted">
                        ${file.type === 'file' ? formatBytes(file.size) + ' ‚Ä¢ ' : 'Dossier ‚Ä¢ '}
                        ${formatDate(file.modified)}
                    </small>
                </div>
                <div class="d-flex align-items-center gap-2">
                    ${file.type === 'directory' ? `
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" ${isSelected ? 'checked' : ''} 
                                   onclick="event.stopPropagation(); togglePcloudSelection('${file.path}')"
                                   title="S√©lectionner ce dossier">
                        </div>
                        <button class="btn btn-outline-danger btn-sm" onclick="event.stopPropagation(); deleteSinglePcloudItem('${file.path}', '${file.name}', 'dossier')" 
                                title="Supprimer ce dossier" style="padding: 0.25rem 0.5rem;">
                            <i class="fas fa-trash-alt" style="font-size: 0.75rem;"></i>
                        </button>
                        <i class="fas fa-chevron-right text-muted" onclick="navigatePcloud('${file.path}')" style="cursor: pointer;"></i>
                    ` : `
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" ${isSelected ? 'checked' : ''} 
                                   onclick="event.stopPropagation(); togglePcloudSelection('${file.path}')">
                        </div>
                        <button class="btn btn-outline-danger btn-sm" onclick="event.stopPropagation(); deleteSinglePcloudItem('${file.path}', '${file.name}', 'fichier')" 
                                title="Supprimer ce fichier" style="padding: 0.25rem 0.5rem;">
                            <i class="fas fa-trash-alt" style="font-size: 0.75rem;"></i>
                        </button>
                    `}
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
    updatePcloudInfo();
}

// Navigation
function navigateLocal(path) {
    loadLocalFiles(path);
    localSelectedFiles.clear();
}

function navigatePcloud(path) {
    loadPcloudFiles(path);
    pcloudSelectedFiles.clear();
}

// Mise √† jour des fils d'Ariane
function updateLocalBreadcrumb(path) {
    const breadcrumb = document.getElementById('localBreadcrumb');
    let html = `
        <li class="breadcrumb-item ${path === '' ? 'active' : ''}">
            <a href="#" onclick="navigateLocal('')">
                <i class="fas fa-home me-1"></i>Racine
            </a>
        </li>
    `;
    
    if (path) {
        const parts = path.split('/').filter(part => part);
        let currentPath = '';
        
        parts.forEach((part, index) => {
            currentPath += (currentPath ? '/' : '') + part;
            const isLast = index === parts.length - 1;
            
            html += `
                <li class="breadcrumb-item ${isLast ? 'active' : ''}">
                    ${isLast ? part : `<a href="#" onclick="navigateLocal('${currentPath}')">${part}</a>`}
                </li>
            `;
        });
    }
    
    breadcrumb.innerHTML = html;
}

function updatePcloudBreadcrumb(path) {
    const breadcrumb = document.getElementById('pcloudBreadcrumb');
    let html = `
        <li class="breadcrumb-item ${path === '' ? 'active' : ''}">
            <a href="#" onclick="navigatePcloud('')">
                <i class="fas fa-cloud me-1"></i>Racine
            </a>
        </li>
    `;
    
    if (path) {
        const parts = path.split('/').filter(part => part);
        let currentPath = '';
        
        parts.forEach((part, index) => {
            currentPath += (currentPath ? '/' : '') + part;
            const isLast = index === parts.length - 1;
            
            html += `
                <li class="breadcrumb-item ${isLast ? 'active' : ''}">
                    ${isLast ? part : `<a href="#" onclick="navigatePcloud('${currentPath}')">${part}</a>`}
                </li>
            `;
        });
    }
    
    breadcrumb.innerHTML = html;
}

// Gestion des s√©lections
function toggleLocalSelection(path) {
    if (localSelectedFiles.has(path)) {
        localSelectedFiles.delete(path);
    } else {
        localSelectedFiles.add(path);
    }
    updateLocalInfo();
    updateSelections();
    // Recharger l'affichage pour mettre √† jour les cases coch√©es
    loadLocalFiles(currentLocalPath);
}

function togglePcloudSelection(path) {
    if (pcloudSelectedFiles.has(path)) {
        pcloudSelectedFiles.delete(path);
    } else {
        pcloudSelectedFiles.add(path);
    }
    updatePcloudInfo();
    updateSelections();
    // Recharger l'affichage pour mettre √† jour les cases coch√©es
    loadPcloudFiles(currentPcloudPath);
}

function selectAllLocal() {
    // Cette fonction sera impl√©ment√©e en r√©cup√©rant tous les fichiers visibles
    showAlert('Fonction en cours de d√©veloppement', 'info');
}

function selectAllPcloud() {
    // Cette fonction sera impl√©ment√©e en r√©cup√©rant tous les fichiers visibles
    showAlert('Fonction en cours de d√©veloppement', 'info');
}

function clearSelectionLocal() {
    localSelectedFiles.clear();
    updateLocalInfo();
    updateSelections();
    loadLocalFiles(currentLocalPath);
}

function clearSelectionPcloud() {
    pcloudSelectedFiles.clear();
    updatePcloudInfo();
    updateSelections();
    loadPcloudFiles(currentPcloudPath);
}

// Mise √† jour des informations
function updateLocalInfo() {
    const info = document.getElementById('localInfo');
    const count = localSelectedFiles.size;
    if (count > 0) {
        const itemType = count === 1 ? '√©l√©ment' : '√©l√©ments';
        info.textContent = `${count} ${itemType} s√©lectionn√©(s)`;
    } else {
        info.textContent = 'S√©lectionnez des fichiers ou dossiers';
    }
}

function updatePcloudInfo() {
    const info = document.getElementById('pcloudInfo');
    const count = pcloudSelectedFiles.size;
    if (count > 0) {
        const itemType = count === 1 ? '√©l√©ment' : '√©l√©ments';
        info.textContent = `${count} ${itemType} s√©lectionn√©(s)`;
    } else {
        info.textContent = 'S√©lectionnez des fichiers ou dossiers';
    }
}

function updateSelections() {
    const localSelection = document.getElementById('localSelection');
    const pcloudSelection = document.getElementById('pcloudSelection');
    
    if (localSelectedFiles.size > 0) {
        const count = localSelectedFiles.size;
        const itemType = count === 1 ? '√©l√©ment' : '√©l√©ments';
        localSelection.textContent = `${count} ${itemType} s√©lectionn√©(s)`;
    } else {
        localSelection.textContent = 'Aucune s√©lection';
    }
    
    if (pcloudSelectedFiles.size > 0) {
        const count = pcloudSelectedFiles.size;
        const itemType = count === 1 ? '√©l√©ment' : '√©l√©ments';
        pcloudSelection.textContent = `${count} ${itemType} s√©lectionn√©(s)`;
    } else {
        pcloudSelection.textContent = 'Aucune s√©lection';
    }
}

// Actions de synchronisation
async function syncToCloud() {
    if (localSelectedFiles.size === 0) {
        showAlert('Veuillez s√©lectionner au moins un fichier ou dossier local', 'warning');
        return;
    }
    
    const fileCount = localSelectedFiles.size;
    const itemType = fileCount === 1 ? '√©l√©ment' : '√©l√©ments';
    const result = await Swal.fire({
        title: 'üîÑ Synchronisation vers pCloud',
        html: `Synchroniser <strong>${fileCount} ${itemType}</strong> vers pCloud?<br><br>
               <span class="text-warning">‚ö†Ô∏è <strong>Attention:</strong> Cette op√©ration supprime les fichiers en trop sur pCloud.</span>`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Oui, synchroniser',
        cancelButtonText: 'Annuler',
        confirmButtonColor: '#2563eb',
        cancelButtonColor: '#6b7280',
        reverseButtons: true
    });
    const confirmed = result.isConfirmed;
    if (!confirmed) return;
    
    showProgress('üîÑ Synchronisation vers pCloud', `Traitement de ${fileCount} ${itemType}...`);
    
    try {
        const filesArray = Array.from(localSelectedFiles);
        let processedFiles = 0;
        let allSuccess = true;
        let errors = [];
        
        for (const localPath of filesArray) {
            const fileName = localPath.split('/').pop();
            const isFolder = !fileName.includes('.');
            
            updateCurrentFile(fileName, 'Synchronisation en cours...', isFolder);
            updateProgress(processedFiles, fileCount, Math.round((processedFiles / fileCount) * 100));
            
            await new Promise(resolve => setTimeout(resolve, 100));
            
            try {
                // Construire le chemin de destination en pr√©servant la structure
                let remotePath = currentPcloudPath;
                if (remotePath && !remotePath.endsWith('/')) {
                    remotePath += '/';
                }
                remotePath += fileName;
                
                const response = await fetch('{{ path('backup_sync_to_cloud') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        localPath: localPath,
                        remotePath: remotePath
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    updateCurrentFile(fileName, '‚úÖ Synchronis√© avec succ√®s', isFolder);
                } else {
                    allSuccess = false;
                    errors.push(`${fileName}: ${result.error}`);
                    updateCurrentFile(fileName, '‚ùå Erreur de synchronisation', isFolder);
                }
                
            } catch (error) {
                allSuccess = false;
                errors.push(`${fileName}: ${error.message}`);
                updateCurrentFile(fileName, '‚ùå Erreur r√©seau', isFolder);
            }
            
            processedFiles++;
            updateProgress(processedFiles, fileCount, Math.round((processedFiles / fileCount) * 100));
            
            await new Promise(resolve => setTimeout(resolve, 200));
        }
        
        updateCurrentFile('Termin√©', 'Actualisation de la liste...', false);
        await loadPcloudFiles(currentPcloudPath);
        
        hideProgress();
        
        if (allSuccess) {
            showAlert(`Synchronisation vers pCloud termin√©e avec succ√®s! ${fileCount} ${itemType} synchronis√©(s).`, 'success');
        } else {
            showAlert(`Synchronisation termin√©e avec des erreurs: ${errors.length} √©chec(s) sur ${fileCount} ${itemType}.`, 'warning');
            console.warn('Erreurs de synchronisation:', errors);
        }
        
    } catch (error) {
        hideProgress();
        showAlert(`Erreur lors de la synchronisation: ${error.message}`, 'danger');
    }
}

async function copyToCloud() {
    if (localSelectedFiles.size === 0) {
        showAlert('Veuillez s√©lectionner au moins un fichier ou dossier local', 'warning');
        return;
    }
    
    const fileCount = localSelectedFiles.size;
    const itemType = fileCount === 1 ? '√©l√©ment' : '√©l√©ments';
    const result = await Swal.fire({
        title: 'üìã Copie vers pCloud',
        html: `Copier <strong>${fileCount} ${itemType}</strong> vers pCloud?<br><br>
               <span class="text-info">üìÅ Les dossiers seront copi√©s avec tout leur contenu.</span>`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Oui, copier',
        cancelButtonText: 'Annuler',
        confirmButtonColor: '#0ea5e9',
        cancelButtonColor: '#6b7280',
        reverseButtons: true
    });
    const confirmed = result.isConfirmed;
    if (!confirmed) return;
    
    showProgress('üìã Copie vers pCloud', `Traitement de ${fileCount} ${itemType}...`);
    
    try {
        const filesArray = Array.from(localSelectedFiles);
        let processedFiles = 0;
        let allSuccess = true;
        let errors = [];
        
        for (const localPath of filesArray) {
            const fileName = localPath.split('/').pop();
            const isFolder = !fileName.includes('.');
            
            updateCurrentFile(fileName, 'Copie en cours...', isFolder);
            updateProgress(processedFiles, fileCount, Math.round((processedFiles / fileCount) * 100));
            
            await new Promise(resolve => setTimeout(resolve, 100));
            
            try {
                // Construire le chemin de destination en pr√©servant la structure
                let remotePath = currentPcloudPath;
                if (remotePath && !remotePath.endsWith('/')) {
                    remotePath += '/';
                }
                remotePath += fileName;

                const response = await fetch('{{ path('backup_copy_to_cloud') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        localPath: localPath,
                        remotePath: remotePath
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    updateCurrentFile(fileName, '‚úÖ Copi√© avec succ√®s', isFolder);
                } else {
                    allSuccess = false;
                    errors.push(`${fileName}: ${result.error}`);
                    updateCurrentFile(fileName, '‚ùå Erreur de copie', isFolder);
                }
                
            } catch (error) {
                allSuccess = false;
                errors.push(`${fileName}: ${error.message}`);
                updateCurrentFile(fileName, '‚ùå Erreur r√©seau', isFolder);
            }
            
            processedFiles++;
            updateProgress(processedFiles, fileCount, Math.round((processedFiles / fileCount) * 100));
            
            await new Promise(resolve => setTimeout(resolve, 200));
        }
        
        updateCurrentFile('Termin√©', 'Actualisation de la liste...', false);
        await loadPcloudFiles(currentPcloudPath);
        
        hideProgress();
        
        if (allSuccess) {
            showAlert(`Copie vers pCloud termin√©e avec succ√®s! ${fileCount} ${itemType} copi√©(s).`, 'success');
        } else {
            showAlert(`Copie termin√©e avec des erreurs: ${errors.length} √©chec(s) sur ${fileCount} ${itemType}.`, 'warning');
            console.warn('Erreurs de copie:', errors);
        }
        
        localSelectedFiles.clear();
        updateSelections();
        
    } catch (error) {
        hideProgress();
        showAlert(`Erreur lors de la copie: ${error.message}`, 'danger');
    }
}

async function syncFromCloud() {
    if (pcloudSelectedFiles.size === 0) {
        showAlert('Veuillez s√©lectionner au moins un fichier ou dossier pCloud', 'warning');
        return;
    }
    
    const fileCount = pcloudSelectedFiles.size;
    const itemType = fileCount === 1 ? '√©l√©ment' : '√©l√©ments';
    const result = await Swal.fire({
        title: '‚¨áÔ∏è Synchronisation depuis pCloud',
        html: `Synchroniser <strong>${fileCount} ${itemType}</strong> depuis pCloud?<br><br>
               <span class="text-success">üìÅ Les dossiers seront t√©l√©charg√©s avec tout leur contenu.</span>`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Oui, synchroniser',
        cancelButtonText: 'Annuler',
        confirmButtonColor: '#10b981',
        cancelButtonColor: '#6b7280',
        reverseButtons: true
    });
    const confirmed = result.isConfirmed;
    if (!confirmed) return;
    
    showProgress('‚¨áÔ∏è Synchronisation depuis pCloud', `T√©l√©chargement de ${fileCount} ${itemType}...`);
    
    try {
        const filesArray = Array.from(pcloudSelectedFiles);
        let processedFiles = 0;
        let allSuccess = true;
        let errors = [];
        
        for (const remotePath of filesArray) {
            const fileName = remotePath.split('/').pop();
            const isFolder = !fileName.includes('.');
            
            updateCurrentFile(fileName, 'T√©l√©chargement en cours...', isFolder);
            updateProgress(processedFiles, fileCount, Math.round((processedFiles / fileCount) * 100));
            
            await new Promise(resolve => setTimeout(resolve, 100));
            
            try {
                // Construire le chemin de destination local
                let localPath = currentLocalPath;
                if (localPath && !localPath.endsWith('/')) {
                    localPath += '/';
                }
                localPath += fileName;
                
                const response = await fetch('{{ path('backup_sync_from_cloud') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        remotePath: remotePath,
                        localPath: localPath
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    updateCurrentFile(fileName, '‚úÖ T√©l√©charg√© avec succ√®s', isFolder);
                } else {
                    allSuccess = false;
                    errors.push(`${fileName}: ${result.error}`);
                    updateCurrentFile(fileName, '‚ùå Erreur de t√©l√©chargement', isFolder);
                }
                
            } catch (error) {
                allSuccess = false;
                errors.push(`${fileName}: ${error.message}`);
                updateCurrentFile(fileName, '‚ùå Erreur r√©seau', isFolder);
            }
            
            processedFiles++;
            updateProgress(processedFiles, fileCount, Math.round((processedFiles / fileCount) * 100));
            
            await new Promise(resolve => setTimeout(resolve, 200));
        }
        
        updateCurrentFile('Termin√©', 'Actualisation de la liste...', false);
        await loadLocalFiles(currentLocalPath);
        
        hideProgress();
        
        if (allSuccess) {
            showAlert(`Synchronisation depuis pCloud termin√©e avec succ√®s! ${fileCount} ${itemType} t√©l√©charg√©(s).`, 'success');
        } else {
            showAlert(`Synchronisation termin√©e avec des erreurs: ${errors.length} √©chec(s) sur ${fileCount} ${itemType}.`, 'warning');
            console.warn('Erreurs de synchronisation:', errors);
        }
        
    } catch (error) {
        hideProgress();
        showAlert(`Erreur lors de la synchronisation: ${error.message}`, 'danger');
    }
}

// Suppression d'un √©l√©ment unique sur pCloud
async function deleteSinglePcloudItem(path, name, type) {
    const result = await Swal.fire({
        title: '‚ö†Ô∏è Suppression d√©finitive',
        html: `√ätes-vous s√ªr de vouloir supprimer d√©finitivement ce <strong>${type}</strong> ?<br><br>
               <span class="text-primary">"${name}"</span><br><br>
               <span class="text-danger"><strong>‚ö†Ô∏è Cette action est IRR√âVERSIBLE !</strong></span>`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Oui, supprimer',
        cancelButtonText: 'Annuler',
        confirmButtonColor: '#ef4444',
        cancelButtonColor: '#6b7280',
        reverseButtons: true,
        focusCancel: true
    });
    if (!result.isConfirmed) return;
    
    // Double confirmation pour les dossiers
    if (type === 'dossier') {
        const doubleResult = await Swal.fire({
            title: 'üóÇÔ∏è Suppression de dossier complet',
            html: `Vous allez supprimer le dossier <strong>"${name}"</strong> et <strong>TOUT SON CONTENU</strong>.<br><br>
                   <span class="text-danger">Tous les fichiers et sous-dossiers seront d√©finitivement perdus.</span><br><br>
                   <strong>√ätes-vous absolument certain ?</strong>`,
            icon: 'error',
            showCancelButton: true,
            confirmButtonText: 'OUI, SUPPRIMER TOUT',
            cancelButtonText: 'Non, annuler',
            confirmButtonColor: '#dc2626',
            cancelButtonColor: '#6b7280',
            reverseButtons: true,
            focusCancel: true
        });
        if (!doubleResult.isConfirmed) return;
    }
    
    showProgress('Suppression en cours', `Suppression de "${name}"...`);
    
    try {
        const response = await fetch('{{ path('backup_delete_from_cloud') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                remotePath: path
            })
        });
        
        const result = await response.json();
        
        hideProgress();
        
        if (result.success) {
            showAlert(`${type.charAt(0).toUpperCase() + type.slice(1)} "${name}" supprim√© avec succ√®s !`, 'success');
            await loadPcloudFiles(currentPcloudPath);
            // Retirer l'√©l√©ment des s√©lections s'il √©tait s√©lectionn√©
            pcloudSelectedFiles.delete(path);
            updateSelections();
        } else {
            throw new Error(result.error || 'Erreur lors de la suppression');
        }
        
    } catch (error) {
        hideProgress();
        showAlert(`Erreur lors de la suppression: ${error.message}`, 'danger');
    }
}

// Suppression des √©l√©ments s√©lectionn√©s sur pCloud
async function deleteSelectedFromCloud() {
    if (pcloudSelectedFiles.size === 0) {
        showAlert('Veuillez s√©lectionner au moins un √©l√©ment √† supprimer', 'warning');
        return;
    }
    
    const itemCount = pcloudSelectedFiles.size;
    const itemType = itemCount === 1 ? '√©l√©ment' : '√©l√©ments';
    
    const result = await Swal.fire({
        title: '‚ö†Ô∏è Suppression multiple',
        html: `Vous allez supprimer d√©finitivement <strong>${itemCount} ${itemType}</strong> de pCloud.<br><br>
               <span class="text-danger"><strong>‚ö†Ô∏è Cette action est IRR√âVERSIBLE !</strong></span><br><br>
               √ätes-vous s√ªr de vouloir continuer ?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Continuer',
        cancelButtonText: 'Annuler',
        confirmButtonColor: '#f59e0b',
        cancelButtonColor: '#6b7280',
        reverseButtons: true,
        focusCancel: true
    });
    if (!result.isConfirmed) return;
    
    // Confirmation finale
    const finalResult = await Swal.fire({
        title: 'üö® Derni√®re chance',
        html: `<strong>Derni√®re confirmation</strong> avant suppression d√©finitive de <strong>${itemCount} ${itemType}</strong>.<br><br>
               <div class="text-center">
                   <span class="text-success">‚úÖ Clic sur "SUPPRIMER" = SUPPRESSION D√âFINITIVE</span><br>
                   <span class="text-info">‚ùå Clic sur "ANNULER" = ANNULATION</span>
               </div>`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'SUPPRIMER D√âFINITIVEMENT',
        cancelButtonText: 'ANNULER',
        confirmButtonColor: '#dc2626',
        cancelButtonColor: '#10b981',
        reverseButtons: true,
        focusCancel: true
    });
    if (!finalResult.isConfirmed) return;
    
    showProgress('Suppression multiple en cours', `Suppression de ${itemCount} ${itemType}...`);
    
    try {
        const pathsArray = Array.from(pcloudSelectedFiles);
        
        const response = await fetch('{{ path('backup_delete_multiple_from_cloud') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                remotePaths: pathsArray
            })
        });
        
        const result = await response.json();
        
        hideProgress();
        
        if (result.success) {
            showAlert(`${result.summary}`, 'success');
        } else {
            showAlert(`${result.summary}`, 'warning');
            
            // Afficher les d√©tails des erreurs
            if (result.results) {
                let errorDetails = '\n\nD√©tails des erreurs :\n';
                result.results.forEach(item => {
                    if (!item.success) {
                        errorDetails += `- ${item.path}: ${item.error}\n`;
                    }
                });
                console.error('Erreurs de suppression:', errorDetails);
            }
        }
        
        // Actualiser la liste et vider les s√©lections
        await loadPcloudFiles(currentPcloudPath);
        pcloudSelectedFiles.clear();
        updateSelections();
        
    } catch (error) {
        hideProgress();
        showAlert(`Erreur lors de la suppression multiple: ${error.message}`, 'danger');
    }
}

// Actualisation
function refreshBrowsers() {
    loadLocalFiles(currentLocalPath);
    loadPcloudFiles(currentPcloudPath);
    localSelectedFiles.clear();
    pcloudSelectedFiles.clear();
    updateSelections();
}
</script>
{% endblock %} 